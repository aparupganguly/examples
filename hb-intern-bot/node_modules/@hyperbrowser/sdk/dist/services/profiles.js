"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilesService = void 0;
const base_1 = require("./base");
const client_1 = require("../client");
class ProfilesService extends base_1.BaseService {
    /**
     * Create a new profile
     * @param params Configuration parameters for the new profile
     */
    async create(params) {
        try {
            return await this.request("/profile", {
                method: "POST",
                body: params ? JSON.stringify(params) : undefined,
            });
        }
        catch (error) {
            if (error instanceof client_1.HyperbrowserError) {
                throw error;
            }
            throw new client_1.HyperbrowserError("Failed to create profile", undefined);
        }
    }
    /**
     * Get details of an existing profile
     * @param id The ID of the profile to get
     */
    async get(id) {
        try {
            return await this.request(`/profile/${id}`);
        }
        catch (error) {
            if (error instanceof client_1.HyperbrowserError) {
                throw error;
            }
            throw new client_1.HyperbrowserError(`Failed to get profile ${id}`, undefined);
        }
    }
    /**
     * Delete an existing profile
     * @param id The ID of the profile to delete
     */
    async delete(id) {
        try {
            return await this.request(`/profile/${id}`, {
                method: "DELETE",
            });
        }
        catch (error) {
            if (error instanceof client_1.HyperbrowserError) {
                throw error;
            }
            throw new client_1.HyperbrowserError(`Failed to delete profile ${id}`, undefined);
        }
    }
    /**
     * List all profiles with optional pagination
     * @param params Optional parameters to filter the profiles
     */
    async list(params = {}) {
        try {
            return await this.request("/profiles", undefined, {
                page: params.page,
                limit: params.limit,
                name: params.name,
            });
        }
        catch (error) {
            if (error instanceof client_1.HyperbrowserError) {
                throw error;
            }
            throw new client_1.HyperbrowserError("Failed to list profiles", undefined);
        }
    }
}
exports.ProfilesService = ProfilesService;
